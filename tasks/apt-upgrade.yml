---
## https://www.redpill-linpro.com/sysadvent/2017/12/24/ansible-system-updates.html
- name: apt-get update
  ansible.builtin.apt:
    update-cache: yes
  changed_when: 0

# get a list of packages that have updates
#- name: get list of pending upgrades wih apt-get
#  ansible.builtin.command: apt-get --simulate dist-upgrade
#  args:
#    warn: false # don't warn us about apt having its own plugin
#  register: apt_simulate
#  changed_when: 0

# collect information
- name: "apt-get listonly collect"
  ansible.builtin.shell: apt-get --just-print upgrade 2>&1 | perl -ne 'if (/Inst\s([\w,\-,\d,\.,~,:,\+]+)\s\[([\w,\-,\d,\.,~,:,\+]+)\]\s\(([\w,\-,\d,\.,~,:,\+]+)\)? /i) {print "PROGRAM= $1 INSTALLED= $2 AVAILABLE= $3\n"}' | column -s ' ' -t
  args:
    warn: false
  register: apt_simulate
  changed_when: false

# apt-get listonly output
- name: apt show upgradable packages
  ansible.builtin.debug: 
    var: apt_simulate.stdout_lines
  changed_when: false

- name: Upgrade all apt packages
  ansible.builtin.apt:
    name: "*"

# pick out list of pending updates from command output. This essentially
# takes the above output from "apt-get --simulate dist-upgrade", and
# pipes it through "cut -f2 -d' ' | sort"
# split is not working
#- name: parse apt-get output to get list of changed packages
#  ansible.builtin.set_fact:
#    updates: '{{ apt_simulate.stdout_lines | select("match", "^i ") | list | split(1, " ") | list | sort }}'
#  changed_when: 0

# tell user about packages being updated
- name: show pending updates
  ansible.builtin.debug:
    var: updates
  when: updates.0 is defined

# request manual ack before proceeding with package upgrade
- name: pause if updates is defined
  ansible.builtin.pause:
  when: updates.0 is defined

# if a new kernel is incoming, remove old ones to avoid full /boot
# split is not working
- name: apt-get autoremove
  ansible.builtin.command: apt-get -y autoremove
  args:
    warn: false
  when: '"Inst linux-image-" in apt_simulate.stdout'
  changed_when: 0

# check if we need a reboot
- name: check if reboot needed
  ansible.builtin.stat: 
    path: /var/run/reboot-required
  register: file_reboot_required

# "meta: end_play" aborts the rest of the tasks in the current «tasks:»
# section, for the current webserver
# "when:" clause ensures that the "meta: end_play" only triggers if the
# current webserver does _not_ need a reboot
- name: set meta info end_play
  meta: end_play
  when: not file_reboot_required.stat.exists

# for example for your monitoring if you have one
# add nagios downtime for the webserver
# - name: set nagios downtime for host
#   delegate_to: "{{ icinga_server }}" # do this on the monitoring server
#   nagios:
#     action: downtime
#     comment: OS Upgrades
#     service: all
#     minutes: 30
#     host: '{{ inventory_hostname }}'
#     author: "{{ lookup('env','USER') }}"
#   when: monitoring_set_downtime == True
#   - 
# https://www.redpill-linpro.com/sysadvent/2017/12/24/ansible-system-updates.html
# 
# - name: disable haproxy backend {{ inventory_hostname }}
#   delegate_to: "{{ item }}"
#   haproxy:
#     state: disabled
#     host: "{{ inventory_hostname | splitpart(0, '.') }}"
#     socket: /var/run/haproxy.sock
#     wait: yes
#     #drain: yes # requires ansible 2.4
#   with_items: "{{ groups.loadbalancers }}"

- name: "Check if reboot is required"
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot_required